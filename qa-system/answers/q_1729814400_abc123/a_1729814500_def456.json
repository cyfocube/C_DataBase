{
  "id": "a_1729814500_def456",
  "question_id": "q_1729814400_abc123",
  "content": "Here are the top 5 gas optimization techniques for Ethereum smart contracts:\n\n**1. Use uint256 instead of smaller uints**\n```solidity\n// ❌ Gas expensive\nuint8 public value1;\nuint16 public value2;\n\n// ✅ Gas efficient\nuint256 public value1;\nuint256 public value2;\n```\n\n**2. Pack struct variables efficiently**\n```solidity\n// ❌ Bad packing (uses 3 storage slots)\nstruct BadStruct {\n    uint256 a;  // slot 0\n    uint8 b;    // slot 1\n    uint256 c;  // slot 2\n}\n\n// ✅ Good packing (uses 2 storage slots)\nstruct GoodStruct {\n    uint256 a;  // slot 0\n    uint256 c;  // slot 1\n    uint8 b;    // fits in slot 1\n}\n```\n\n**3. Use events instead of storage for logging**\n**4. Cache storage variables in memory**\n**5. Use mappings instead of arrays when possible**\n\nThese techniques can reduce gas costs by 20-40% in typical DeFi contracts!",
  "author_wallet": "0x5678901234567890123456789012345678901234",
  "author_name": "GasOptimizer",
  "created_at": "2025-10-24T12:30:00Z",
  "updated_at": "2025-10-24T12:30:00Z",
  "votes": 12,
  "is_accepted": true,
  "parent_answer_id": null,
  "reply_count": 2,
  "depth": 0,
  "code_snippets": [
    {
      "language": "solidity",
      "code": "contract GasOptimized {\n    uint256 public value; // Better than uint8\n}"
    }
  ],
  "helpful_votes": 8,
  "spam_reports": 0
}