{
  "id": "q_1729824200_solidity001",
  "title": "Solidity assembly gas optimization - is inline assembly worth the risk?",
  "content": "Working on a DEX router where gas costs are critical. Current Solidity implementation uses ~180k gas per swap, but I can reduce to ~145k using inline assembly. Is the 20% gas savings worth the security/maintainability risks?\n\n**Current Solidity:**\n```solidity\nfunction calculateAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) \n    internal pure returns (uint256) {\n    uint256 amountInWithFee = amountIn * 997;\n    uint256 numerator = amountInWithFee * reserveOut;\n    uint256 denominator = reserveIn * 1000 + amountInWithFee;\n    return numerator / denominator;\n}\n```\n\n**Assembly version saves ~35k gas:**\n```solidity\nfunction calculateAmountOutAsm(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) \n    internal pure returns (uint256 amountOut) {\n    assembly {\n        let amountInWithFee := mul(amountIn, 997)\n        let numerator := mul(amountInWithFee, reserveOut) \n        let denominator := add(mul(reserveIn, 1000), amountInWithFee)\n        amountOut := div(numerator, denominator)\n    }\n}\n```\n\nFor high-volume DEX (1000+ swaps/day), gas savings = ~$500-1500/month. But assembly code:\n- Harder to audit\n- No overflow protection\n- Compiler optimizations disabled\n- Future Solidity improvements won't apply\n\nGiven DeFi hack history, is this premature optimization? What's the community consensus on assembly usage in 2024?",
  "tags": ["solidity", "assembly", "gas-optimization", "dex", "security"],
  "difficulty": "Expert",
  "bounty_amount": 400,
  "bounty_token": "USDC",
  "author_wallet": "0x9012345678901234567890123456789012345678",
  "author_name": "GasOptimizer",
  "created_at": "2025-10-24T12:00:00Z",
  "updated_at": "2025-10-24T12:00:00Z",
  "views": 234,
  "votes": 19,
  "answer_count": 5,
  "is_answered": true,
  "accepted_answer_id": "a_1729824400_solidity001",
  "last_activity": "2025-10-24T16:45:00Z"
}